{"version":3,"sources":["StateProvider.js","reducer.js","components/Search.js","components/Home.js","useGoogleSearch.js","Keys.js","components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","useGoogleSearch","data","setData","useEffect","a","fetch","then","response","json","result","fetchData","SearchPage","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","pagemap","cse_image","length","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4063b8c1.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n// import the required dependencies\n\nexport const StateContext = createContext();\n// prepare the data layer to be exported\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n\t//the initialstate is what the data layer looks like when the app is loaded\n\t//the reducer is somthing that listens to changes that are occuring in the data layer\n\t<StateContext.Provider value={useReducer(reducer, initialState)}>\n\t\t{children}\n\t</StateContext.Provider>\n\n\t// The above block of code mirrors the block of code below (which is from index.js).\n\n\t// \t<StateProvider initialState={initialState} reducer={reducer}>\n\t// <App />\n\t// </StateProvider>\n\n\t// <StateContext.Provider value={useReducer(reducer, initialState)}>\n\t// mirrors\n\t// <StateProvider initialState={initialState} reducer={reducer}>\n\n\t// {children}\n\t// mirrors\n\t// <App/>\n\n\t// </StateContext.Provider>\n\t// mirrors\n\t// </StateProvider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n// this is a hook which allows us to pull information from the data layer\n","export const initialState = {\n\t//The initial state tells us what the data layer looks like at the beginning\n\tterm: null\n\t// in the begining the data layer has nothing inside it, therefore its null\n\t// but when you type something into the search bar,\n\t// then the data layer will contain that search item\n\n\t// for example: if you search 'elon musk',\n\t// then the data layer will be term : 'elon musk'\n};\n\nexport const actionTypes = {\n\t// whenever you type into the search bar and press enter\n\tSET_SEARCH_TERM: \"SET_SEARCH_TERM\"\n\t// we will need to dispatch an action\n\t// to change and set the search term\n};\n\nconst reducer = (state, action) => {\n\t// The constant reducer has the parameters state and action.\n\t// State identifies the state of the data layer.\n\t// Action refers to type of action we are dispatching into the data layer.\n\t// Inside the data layer the reducers job is to listen to any dispatched actions.\n\t// If we don't know what the dispatched action is, it just returns the current state.\n\t// If we know what the action is, then its going to return what the new data layer should look like.\n\n\tconsole.log(action);\n\n\t// The console log here is usefull for debugging,\n\t// so whenever we manipulate the data layer, it will log the action that we dispatched.\n\n\tswitch (action.type) {\n\t\t//\n\t\tcase actionTypes.SET_SEARCH_TERM:\n\t\t\t// the action type is set_search_term\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t// return whatever the state currently looks like\n\t\t\t\tterm: action.term\n\t\t\t\t// change the term inside of the data layer,\n\t\t\t\t// with whatever action term we dispatched\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default reducer;\n","import React, { useState } from \"react\";\nimport \"./Search.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../StateProvider.js\";\nimport { actionTypes } from \"../reducer.js\";\n\nfunction Search({ hideButtons = false }) {\n\t// The function search has a props called 'hidebuttons'\n\t// The prop hideButtons will be used to hide the buttons that are under the search bar.\n\t// By default the value of this props is false.\n\t// This means that the buttons will not be hidden by default,\n\t// but they will only be hidden after the user searches for something and the results page pops up\n\n\tconst [{}, dispatch] = useStateValue();\n\t// In the stateprovide.js, the last line is: ' export const useStateValue = () => useContext(StateContext); '\n\t// This is a hook that allows us to pull information from the data layer.\n\t// Now, we want to pull information for the data layer, from within this component.\n\t// In order to do that, we have to write ' const [{}, dispatch] = useStateValue(); '\n\t// This simply means that we are going to dispatch\n\t// ( dispatch is like a gun that allows us to shoot actions into the data layer)\n\t// into the data layer from within this component.\n\n\tconst [input, setInput] = useState(\"\");\n\t// (input) The constant input contains a string\n\t// (setInput) And we declare that we will mainpulate this string\n\t// By wrapping the string in a UseState()\n\n\tconst history = useHistory();\n\t// This provides us with the browsers history\n\n\tconst search = e => {\n\t\t// the constant search  will contain an event\n\t\te.preventDefault();\n\t\t// By default, the input field gets refreshed every time something is submitted\n\t\t// This line of code stops the input field from refereshing.\n\t\t// As a result, the previous messages that were inputed, will not be erased.\n\n\t\tconsole.log(\"you hit the search button >>\", input);\n\t\t// whenever something is typed into the input field (i.e, the search bar)\n\t\t// in the browsers console\n\t\t// out put the string 'you hit the search button' + 'whatever was typed into the input field'\n\n\t\tdispatch({\n\t\t\t// whenever we type in the searh bar\n\t\t\t// we are going to dispatch an action\n\t\t\ttype: actionTypes.SET_SEARCH_TERM,\n\t\t\t// and the type of the action is actionTypes.SET_SEARCH_TERM\n\t\t\t// [ this line matches with this line 'case actionTypes.SET_SEARCH_TERM'\n\t\t\t// which is from reducer.js ]\n\t\t\tterm: input\n\t\t\t// we want the term to be whatever the input is\n\t\t\t// for example: if the user inputs 'tirade' into the search bar\n\t\t\t// then the term will be 'tirade'\n\t\t\t// In the chrome console we will get: {type: \"SET_SEARCH_TERM\", term: \"Tirade\"}\n\t\t});\n\t\t//\n\t\thistory.push(\"/search\");\n\t\t//  whenever the input field is clicked on and then enter is pressed\n\t\t//  output the search results on the page (from app.js) whose route path is \"/search\".\n\t\t// In other words, route the results to the page that has '/search' url\n\t};\n\t//\n\treturn (\n\t\t<form className=\"search\">\n\t\t\t{/*  */}\n\t\t\t<div className=\"search_input\">\n\t\t\t\t{/*  */}\n\t\t\t\t<SearchIcon className=\"search_inputIcon\" />\n\t\t\t\t{/*  */}\n\t\t\t\t<input\n\t\t\t\t\t//\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tonChange={e => setInput(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<MicIcon />\n\t\t\t\t{/*  */}\n\t\t\t</div>\n\n\t\t\t{/* When the user searchs for something\n\t\t\t\tthe user will be re-directed to the resultspage.\n\t\t\t\tIn the results page, the search bar will be on top of the page\n\t\t\t\tbut the buttons below the search bar will be hidden.\n\t\t\t\tHere we are going to wrap the buttons in a ternary (if and then statement).  \n\t\t\t\tThis ternary will hide the buttons.\n\t\t\t\t */}\n\n\t\t\t{!hideButtons ? (\n\t\t\t\t// If the user is on the landing page\n\t\t\t\t// and they have not searched for anything yet\n\t\t\t\t// then we will show the buttons\n\t\t\t\t<div className=\"search_buttons\">\n\t\t\t\t\t{/*  */}\n\t\t\t\t\t<Button\n\t\t\t\t\t\t//\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={search}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t>\n\t\t\t\t\t\tGoogle Search\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button variant=\"outlined\">I'm feeling lucky</Button>\n\t\t\t\t\t{/*  */}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t// otherwise (i.e, if the user has searched for something)\n\t\t\t\t// we will hide the buttons by giving them the class of \"search_buttonsHidden\"\n\t\t\t\t// and in the css, the class search_buttonHidden will have a value of 'display:none'\n\t\t\t\t<div className=\"search_buttons\">\n\t\t\t\t\t{/*  */}\n\t\t\t\t\t<Button\n\t\t\t\t\t\t//\n\t\t\t\t\t\tclassName=\"search_buttonsHidden\"\n\t\t\t\t\t\t// here is we are giving it the class of hidden\n\t\t\t\t\t\t// this will make it possible to hide the buttons\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={search}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t>\n\t\t\t\t\t\tGoogle Search\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\t//\n\t\t\t\t\t\tclassName=\"search_buttonsHidden\"\n\t\t\t\t\t\t// here is we are giving it the class of hidden\n\t\t\t\t\t\t// this will make it possible to hide the buttons\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t>\n\t\t\t\t\t\tI'm feeling lucky\n\t\t\t\t\t</Button>\n\t\t\t\t\t{/*  */}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</form>\n\t);\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport { Avatar } from \"@material-ui/core\";\nimport Search from \"../components/Search\";\n\nfunction Home() {\n\treturn (\n\t\t<div className=\"home\">\n\t\t\t<div className=\"home_header\">\n\t\t\t\t{/*  */}\n\t\t\t\t<div className=\"home_headerLeft\">\n\t\t\t\t\t<Link to=\"/about\">About</Link>\n\t\t\t\t\t<Link to=\"/store\">Store</Link>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"home_headerRight\">\n\t\t\t\t\t<Link to=\"/gmail\">Gmail</Link>\n\t\t\t\t\t<Link to=\"/images\">Images</Link>\n\t\t\t\t\t<AppsIcon />\n\t\t\t\t\t<Avatar />\n\t\t\t\t</div>\n\t\t\t\t{/*  */}\n\t\t\t</div>\n\n\t\t\t<div className=\"home_body\">\n\t\t\t\t<img\n\t\t\t\t\t//\n\t\t\t\t\tsrc=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n\t\t\t\t\talt=\"\"\n\t\t\t\t/>\n\t\t\t\t<div className=\"home_inputContainer\">\n\t\t\t\t\t<Search />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\n\nimport API_KEY from \"./Keys.js\";\n\nconst CONTEXT_KEY = \"df0fd07ea83482812\";\n// When we were filling out the form on this page https://cse.google.com/cse/create/new\n// we stated that we were going to use the google search engline for the searches\n// This context key is important because it tells the google developer account, which search engine to use.\n\n//! Below is an example of a custom hook.\n\nconst useGoogleSearch = (term) => {\n\t// We pass into this hook (conse UseGoogleSearch),\n\t// the 'term' that the user inputed into the search bar (term)\n\t// and whenever term changes,\n\t// th code that's inside this hook will be triggered\n\n\tconst [data, setData] = useState(null);\n\t// This hook is going to have its own piece of state called 'data'\n\n\tuseEffect(() => {\n\t\t// Whenever we use this hook, it is going to fire off a useEffect,\n\t\t// and this useEffect is dependent on the 'term'\n\n\t\tconst fetchData = async () => {\n\t\t\tfetch(\n\t\t\t\t`https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`\n\t\t\t\t// This is the end point that connects to googles custom search api.\n\t\t\t\t// The context key represents the search engine that we chose to run the query through.\n\t\t\t\t// q stands for the query/term that the user inputs.\n\t\t\t)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t// get the response in json format\n\n\t\t\t\t.then((result) => {\n\t\t\t\t\t// take the results\n\n\t\t\t\t\tsetData(result);\n\t\t\t\t\t// insert the results into the constant Data\n\t\t\t\t});\n\t\t};\n\t\t//\n\t\tfetchData();\n\t\t// fetch the constant data\n\t}, [term]);\n\t//\n\treturn { data };\n};\n\nexport default useGoogleSearch;\n","// We are using the api from google\n\n// https://developers.google.com/custom-search/v1/using_rest\n\nexport const API_KEY = \"AIzaSyBGOSAFwBB6u-_X1h-Mo4PzUsVuGmVBWfk\";\n\nexport default API_KEY;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./SearchPage.css\";\n//\nimport { useStateValue } from \"../StateProvider.js\";\nimport useGoogleSearch from \"../useGoogleSearch.js\";\n// import Response from \"../response.js\";\n//\nimport Search from \"./Search.js\";\n// we are importing search component,\n// because we want to display the search bar\n// without the buttons, on the search page\n//\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n//------------------------------------ Imports complete\n\nfunction SearchPage() {\n\t//\n\tconst [{ term }, dispatch] = useStateValue();\n\t// In the stateprovide.js, the last line is: ' export const useStateValue = () => useContext(StateContext); '\n\t// This is a hook that allows us to pull information from the data layer.\n\t// Now, we want to pull information for the data layer, from within this component.\n\t// In order to do that, we have to write ' const [{}, dispatch] = useStateValue(); '\n\t// This simply means that we are going to dispatch\n\t// ( dispatch is like a gun that allows us to shoot actions into the data layer)\n\t// into the data layer from within this component.\n\t//\n\t// In this particular case, we have the word term in the curly brackets.\n\t// We did this because we wanted to display on the searchPage, the search terms which are being inputed by the user.\n\n\t//! For production, we can use the code below.\n\t//! This code is for the live Api call.\n\tconst { data } = useGoogleSearch(term);\n\t// the constant data stores the result of the 'search term' after its looped through the hook 'useGoogleSearch'\n\n\t//! In development, to avoid using up our quota for googleapi requests,\n\t//! we are going to pull on the json data that's saved in response.js.\n\t//! The json data in response.js is the result for the search word 'covid'\n\t//! So, when you enter a word into the search bar, the word will alwys be displayed on the SearchPage\n\t//! but it will not pass through the api, and therefore\n\t//! the json that will appear in the browser console will always be the covid results json\n\t// const data = Response;\n\n\tconsole.log(data);\n\t//show all the data in the console\n\n\treturn (\n\t\t<div className=\"searchPage\">\n\t\t\t<div className=\"searchPage_header\">\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"searchPage_logo\"\n\t\t\t\t\t\tsrc=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t/>\n\t\t\t\t</Link>\n\n\t\t\t\t<div className=\"searchPage_headerBody\">\n\t\t\t\t\t<Search hideButtons />\n\t\t\t\t\t{/* The search component with the Hidebuttons passed through it\n\t\t\t\t\t\twill display the search bar without the buttons onto the SearchPage */}\n\n\t\t\t\t\t<div className=\"searchPage_options\">\n\t\t\t\t\t\t<div className=\"searchPage_optionsLeft\">\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<SearchIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/all\"> All</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<DescriptionIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/news\"> News</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<ImageIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/images\"> Images</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<LocalOfferIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/shopping\"> Shopping</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<RoomIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/maps\"> maps</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<MoreVertIcon />\n\t\t\t\t\t\t\t\t<Link to=\"/more\"> more</Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"searchPage_optionsRight\">\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<Link to=\"/settings\"> Settings </Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t<div className=\"searchPage_option\">\n\t\t\t\t\t\t\t\t<Link to=\"/tools\"> Tools </Link>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{term && (\n\t\t\t\t// If a search term has been submitted, then render the below div.\n\t\t\t\t// In the div below, we are pulling all the data from the saved json in response.js\n\t\t\t\t// We are using the end points in the json to pull the data\n\t\t\t\t// The word 'data', thats at the beginning of the end point, has'?' in front it .\n\t\t\t\t// This is called optional chaining.\n\t\t\t\t// We are using the '?' because we assume that\n\t\t\t\t// the data might be delayed while its being fetching,\n\t\t\t\t// and we don't want the code to break during that delay.\n\t\t\t\t<div className=\"searchPage_results\">\n\t\t\t\t\t<p className=\"searchPage_resultcount\">\n\t\t\t\t\t\tAbout {data?.searchInformation.formattedTotalResults} results ,\n\t\t\t\t\t\t{/* this endpoint is fetching the result count */}\n\t\t\t\t\t\tin {data?.searchInformation.formattedSearchTime} seconds, for {term}\n\t\t\t\t\t\t{/* this endpoint is fetching the time it took to get all the results\n\t\t\t\t\t\t\tand it's displaying the search term */}\n\t\t\t\t\t</p>\n\t\t\t\t\t{data?.items.map((item) => (\n\t\t\t\t\t\t// map through each item in the data, and render the below endpoints\n\t\t\t\t\t\t<div className=\"searchPage_result\">\n\t\t\t\t\t\t\t<a className=\"searchPage_resultLink\" href={item.link}>\n\t\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t\t{item.pagemap?.cse_image?.length > 0 &&\n\t\t\t\t\t\t\t\t\t// if the length of 'pagemap.cse_image' is longer than 0,\n\t\t\t\t\t\t\t\t\t// then that means there is an image in there\n\t\t\t\t\t\t\t\t\t// then render the below code\n\t\t\t\t\t\t\t\t\titem.pagemap?.cse_image[0]?.src && (\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"searchPage_resultImage\"\n\t\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t\t\titem.pagemap?.cse_image?.length > 0 &&\n\t\t\t\t\t\t\t\t\t\t\t\titem.pagemap?.cse_image[0]?.src\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{/*if there is an image, then access the source and render the image*/}\n\t\t\t\t\t\t\t\t{item.displayLink} ▽{/* the website */}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a className=\"searchPage_resultTitle\" href={item.link}>\n\t\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t\t<h2>{item.title}</h2>\n\t\t\t\t\t\t\t\t{/* the title */}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<p className=\"searchPage_resultSnippet\">\n\t\t\t\t\t\t\t\t{/*  */}\n\t\t\t\t\t\t\t\t{item.snippet}\n\t\t\t\t\t\t\t\t{/* the snippet */}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default SearchPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchPage from \"./components/SearchPage\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/search\">\n\t\t\t\t\t\t<SearchPage />\n\t\t\t\t\t\t{/* Search Results page - contains search results */}\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t{/* Home page - contains search bar */}\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer.js\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t{/* To use the react context api, we have to wrap the app \n\t\twith the stateprovider (which is the data layer). \n\t\tAs a result we can push data into the data layer, \n\t\tand we can also pull data whenever we need to*/}\n\t\t<StateProvider initialState={initialState} reducer={reducer}>\n\t\t\t<App />\n\t\t</StateProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}